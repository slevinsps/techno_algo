1 - Даны два строго возрастающих массива целых чисел A[0..n) и B[0..m) и число k. 
    Найти количество таких пар индексов (i, j), что A[i] + B[j] = k. Время работы O(n + m). n, m ≤ 100000.
    Указание. Обходите массив B от конца к началу.
    Ввод	
    4
    -5 0 3 18
    5
    -10 -2 4 7 12
    7
    Вывод
    3

2 - Дан массив целых чисел А[0..n-1]. Известно, что на интервале [0, m] значения
    массива строго возрастают, а на интервале [m, n-1] строго убывают. Найти m за O( log m ).
    2 ≤ n ≤ 10000.
    Ввод	
    10
    1 2 3 4 5 6 7 6 5 4
    Вывод    
    6
    
3 - Реализовать дек с динамическим зацикленным буфером. Обрабатывать команды push * и pop *.
    В первой строке количество команд n. n ≤ 1000000.
    Каждая команда задаётся как 2 целых числа: a b.
    a = 1 - push front
    a = 2 - pop front
    a = 3 - push back
    a = 4 - pop back
    Если дана команда pop *, то число b - ожидаемое значение. Если команда pop * вызвана для пустой структуры данных, то ожидается “-1”.

4 - На вокзале есть некоторое количество тупиков, куда прибывают электрички. 
    Этот вокзал является их конечной станцией. Дано расписание движения электричек, 
    в котором для каждой электрички указано время ее прибытия, а также время отправления 
    в следующий рейс. Электрички в расписании упорядочены по времени прибытия. 
    Когда электричка прибывает, ее ставят в свободный тупик с минимальным номером. 
    При этом если электричка из какого-то тупика отправилась в момент времени X, то электричку, 
    которая прибывает в момент времени X, в этот тупик ставить нельзя, а электричку, 
    прибывающую в момент X+1 — можно. В данный момент на вокзале достаточное количество 
    тупиков для работы по расписанию. Напишите программу, которая по данному расписанию 
    определяет, какое минимальное количество тупиков требуется для работы вокзала.
    Формат ввода
    Вначале вводится n - количество электричек в расписании. 
    Затем вводится n строк для каждой электрички, в строке - 
    время прибытия и время отправления. Время - натуральное число от 0 до 1 000 000 000. 
    Строки в расписании упорядочены по времени прибытия.
5 - В супермаркете решили оптимизировать показ рекламы. 
    Известно расписание прихода и ухода покупателей (два целых числа).
    Каждому покупателю необходимо показать минимум 2 рекламы. Рекламу можно транслировать 
    только в целочисленные моменты времени. Покупатель может видеть рекламу от момента
    прихода до момента ухода из магазина. В каждый момент времени может показываться только 
    одна реклама. Считается, что реклама показывается мгновенно. Если реклама показывается в 
    момент ухода или прихода, то считается, что посетитель успел её посмотреть. 
    Требуется определить минимальное число показов рекламы.
    Вывод
    5
    1 10
    10 12
    1 10
    1 10
    23 24
    Вывод
    5
6 - Даны неотрицательные целые числа n, k и массив целых чисел из диапазона [0..109] размера n.
    Требуется найти k-ю порядковую статистику. т.е. напечатать число, которое бы стояло на позиции с индексом k ∈[0..n-1] в отсортированном массиве.
    Напишите нерекурсивный алгоритм.
    Требования к дополнительной памяти: O(n).
    Требуемое среднее время работы: O(n).
    Функцию Partition следует реализовывать методом прохода двумя итераторами в одном направлении.
    Описание для случая прохода от начала массива к концу:
    Выбирается опорный элемент.
    Опорный элемент меняется с последним элементом массива.
    Во время работы Partition в начале массива содержатся элементы, не бОльшие опорного. Затем располагаются элементы, строго бОльшие опорного. В конце массива лежат нерассмотренные элементы. Последним элементом лежит опорный.
    Итератор (индекс) i указывает на начало группы элементов, строго бОльших опорного.
    Итератор j больше i, итератор j указывает на первый нерассмотренный элемент.
    Шаг алгоритма. Рассматривается элемент, на который указывает j. Если он больше опорного, то сдвигаем j. Если он не больше опорного, то меняем a[i] и a[j] местами, сдвигаем i и сдвигаем j.
    В конце работы алгоритма меняем опорный и элемент, на который указывает итератор i.
    Ввод
    10 4
    1 2 3 4 5 6 7 8 9 10
    Вывод
    5
7 - Дан массив неотрицательных целых 64-битных чисел. Количество чисел не больше 1000000.
    Отсортировать массив методом поразрядной сортировки LSD по байтам.
